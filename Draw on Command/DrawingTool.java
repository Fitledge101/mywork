/** * Enables the user to draw on a canvas by typing commands.  * Sorts the commands received and calls the appropriate mutator * methods from the DrawAssist class * * @author Edward Taylor (based on original code by David J. Barnes) * @version (02/12/2016) */public class DrawingTool{    private boolean finished;    private DrawAssist assist;    /**     * Prepare to draw on a canvas of default size.     */    public DrawingTool()    {        this(500, 400);    }    /**     * Prepare to draw on a canvas of specified size.     * @param width The canvas width.     * @param height The canvas height.     */    public DrawingTool(int width, int height)    {        finished = false;        assist = new DrawAssist(width, height);    }    /**     * Initiates the drawing command interface and     * uses user input to effect drawing mechanics via      * sorting methods and DrawAssist     */    public void draw()    {        System.out.println("Welcome to the drawing tool.");        System.out.println("Create a pen to begin drawing");        System.out.println("Type help for a list of commands");        System.out.println();        System.out.println("Type bye to exit.");        finished = false;        while(!finished)        {            //loads up the assistant's LinkedList with commands            assist.initialiseAssist();            if(!assist.isEmpty()){                String firstWord = assist.getCommand(0);                //Next check how many words have been typed into the command interface and call the sorting method for that amount                if (assist.isSize(1))                {                    oneSort(firstWord);                }                else if (assist.isSize(2))                {                    String secondWord = assist.getCommand(1);                    twoSort(firstWord, secondWord);                }                else if (assist.isSize(3))                {                    String secondWord = assist.getCommand(1);                    String thirdWord = assist.getCommand(2);                    threeSort(firstWord,secondWord,thirdWord);                }                else                {                    assist.invalidCommand(5);                }            }        }        System.out.println("Session Terminated");        System.out.println("Farewell");    }    /**     * Invokes appropriate mutator methods if a single word is      * entered into the command interface     * @parameter the word to be evaluated     */    private void oneSort(String firstWord)    {        switch (firstWord)        {            case "bye":            finished = true;            break;            case "help":            assist.printHelp();            break;            case "up":            assist.upPen();            break;            case "down":            assist.downPen();            break;            default:            assist.invalidCommand(1);        }    }    /**     * Invokes appropriate mutator methods     * if two words are entered into the command interface     * @parameter the words to be evaluated     */    private void twoSort(String firstWord, String secondWord)    {        switch (firstWord)        {            case "pen":            assist.createPen(secondWord);            break;            case "move":            assist.movePen(secondWord);            break;            case "turn":            assist.turnPen(secondWord);            break;            case "turnto":            assist.turnToPen(secondWord);            break;            case "select":            assist.selectPen(secondWord);            break;            case "delete":            assist.deletePen(secondWord);            break;            case "colour":            //further processing before being handed to DrawAssist            colourSort(secondWord);            break;            default:            assist.invalidCommand(1);        }    }    /**     * Invokes appropriate mutator methods     * if three words are entered into the command interface     * @parameter the words to be evaluated     */    private void threeSort(String firstWord, String secondWord, String thirdWord)    {        switch (firstWord)        {            case "moveto":            assist.moveToPen(secondWord, thirdWord);            break;            default:            assist.invalidCommand(10);            break;        }    }    /**     * Invokes appropriate mutator methods if colour is      * entered into the command interface       * @parameter the word to be evaluated     */    private void colourSort(String secondWord)    {        switch(secondWord)        {            case "red":            assist.colourSet(1);            break;            case "blue":            assist.colourSet(2);            break;            case "green":            assist.colourSet(3);            break;            case "black":            assist.colourSet(4);            break;            case "magenta":            assist.colourSet(5);            break;            default:            assist.invalidCommand(7);        }    }}